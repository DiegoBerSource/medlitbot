{"version":3,"file":"training-DiT7B9Ie.js","sources":["../../src/stores/training.ts"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\nimport { modelApi } from '@/utils/api'\nimport type { \n  TrainingJob, \n  HyperparameterOptimizationRequest,\n  HyperparameterOptimizationResponse\n} from '@/types'\n\nexport const useTrainingStore = defineStore('training', () => {\n  // State\n  const jobs = ref<TrainingJob[]>([])\n  const activeJobs = ref<TrainingJob[]>([])\n  const currentJob = ref<TrainingJob | null>(null)\n  const loading = ref(false)\n  const error = ref<string | null>(null)\n\n  // Computed\n  const jobsByStatus = computed(() => ({\n    active: jobs.value.filter(j => j.status === 'running'),\n    completed: jobs.value.filter(j => j.status === 'completed'),\n    failed: jobs.value.filter(j => j.status === 'failed'),\n    pending: jobs.value.filter(j => j.status === 'pending')\n  }))\n\n  const totalJobs = computed(() => jobs.value.length)\n  const activeJobCount = computed(() => jobsByStatus.value.active.length)\n\n  const recentJobs = computed(() => \n    jobs.value\n      .slice()\n      .sort((a, b) => {\n        const timeA = a.started_at ? new Date(a.started_at).getTime() : 0\n        const timeB = b.started_at ? new Date(b.started_at).getTime() : 0\n        return timeB - timeA\n      })\n      .slice(0, 10)\n  )\n\n  // Actions\n  const fetchJobs = async () => {\n    loading.value = true\n    error.value = null\n    try {\n      // Use modelApi to get models and derive training jobs from them\n      const models = await modelApi.getModels()\n      const trainingJobs: TrainingJob[] = []\n      \n      for (const model of models.items || []) {\n        try {\n          const trainingJob = await modelApi.getTrainingJob(model.id)\n          trainingJobs.push(trainingJob)\n        } catch {\n          // Model might not have active training, skip\n        }\n      }\n      \n      jobs.value = trainingJobs\n      activeJobs.value = jobs.value.filter(j => j.status === 'running')\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Failed to fetch training jobs'\n      console.error('Failed to fetch training jobs:', err)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const fetchActiveJobs = async () => {\n    loading.value = true\n    error.value = null\n    try {\n      // Get models and check which ones have active training\n      const models = await modelApi.getModels()\n      const activeTrainingJobs: TrainingJob[] = []\n      \n      for (const model of models.items || []) {\n        if (model.status === 'training') {\n          try {\n            const trainingJob = await modelApi.getTrainingJob(model.id)\n            activeTrainingJobs.push(trainingJob)\n          } catch {\n            // Training job might not exist, skip\n          }\n        }\n      }\n      \n      activeJobs.value = activeTrainingJobs\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Failed to fetch active jobs'\n      console.error('Failed to fetch active jobs:', err)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const fetchJob = async (modelId: number) => {\n    loading.value = true\n    error.value = null\n    try {\n      currentJob.value = await modelApi.getTrainingJob(modelId)\n      return currentJob.value\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Failed to fetch training job'\n      console.error('Failed to fetch training job:', err)\n      throw err\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const startTraining = async (modelId: number, params: any): Promise<TrainingJob> => {\n    loading.value = true\n    error.value = null\n    try {\n      const trainingJob = await modelApi.startTraining(modelId, params)\n      \n      jobs.value.unshift(trainingJob)\n      activeJobs.value.unshift(trainingJob)\n      currentJob.value = trainingJob\n      \n      return trainingJob\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Failed to start training'\n      console.error('Failed to start training:', err)\n      throw err\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const startHyperparameterOptimization = async (\n    modelId: number, \n    request: HyperparameterOptimizationRequest\n  ): Promise<HyperparameterOptimizationResponse> => {\n    loading.value = true\n    error.value = null\n    try {\n      const response = await modelApi.optimizeHyperparameters(modelId, request)\n      \n      // Create a training job record\n      const newJob: TrainingJob = {\n        id: (response as any).optimization_id || 0,\n        model: modelId,\n        status: 'running',\n        progress_percentage: 0,\n        current_epoch: 0,\n        total_epochs: request.n_trials || 10,\n        current_loss: null,\n        current_accuracy: null,\n        started_at: new Date().toISOString(),\n        completed_at: null,\n        error_message: null,\n        celery_task_id: (response as any).task_id || '',\n        model_id: modelId,\n        updated_at: new Date().toISOString()\n      }\n      \n      jobs.value.unshift(newJob)\n      activeJobs.value.unshift(newJob)\n      currentJob.value = newJob\n      \n      return response\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Failed to start hyperparameter optimization'\n      console.error('Failed to start hyperparameter optimization:', err)\n      throw err\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const stopJob = async (modelId: number) => {\n    loading.value = true\n    error.value = null\n    try {\n      await modelApi.stopTraining(modelId)\n      \n      // Update job status\n      const jobIndex = jobs.value.findIndex(j => j.model_id === modelId)\n      if (jobIndex !== -1) {\n        jobs.value[jobIndex] = { ...jobs.value[jobIndex], status: 'cancelled' } as any\n      }\n      \n      const activeIndex = activeJobs.value.findIndex(j => j.model_id === modelId)\n      if (activeIndex !== -1) {\n        activeJobs.value.splice(activeIndex, 1)\n      }\n      \n      if (currentJob.value?.model_id === modelId) {\n        currentJob.value = { ...currentJob.value, status: 'cancelled' }\n      }\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Failed to stop training job'\n      console.error('Failed to stop training job:', err)\n      throw err\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const deleteJob = async (modelId: number) => {\n    loading.value = true\n    error.value = null\n    try {\n      // In this case, deleting a training job means deleting the model\n      await modelApi.deleteModel(modelId)\n      \n      jobs.value = jobs.value.filter(j => j.model_id !== modelId)\n      activeJobs.value = activeJobs.value.filter(j => j.model_id !== modelId)\n      \n      if (currentJob.value?.model_id === modelId) {\n        currentJob.value = null\n      }\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Failed to delete training job'\n      console.error('Failed to delete training job:', err)\n      throw err\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const updateJobProgress = (jobId: number, progress: Partial<TrainingJob>) => {\n    const jobIndex = jobs.value.findIndex(j => j.id === jobId)\n    if (jobIndex !== -1) {\n      jobs.value[jobIndex] = { ...jobs.value[jobIndex], ...progress } as any\n    }\n    \n    const activeIndex = activeJobs.value.findIndex(j => j.id === jobId)\n    if (activeIndex !== -1) {\n      activeJobs.value[activeIndex] = { ...activeJobs.value[activeIndex], ...progress } as any\n    }\n    \n    if (currentJob.value?.id === jobId) {\n      currentJob.value = { ...currentJob.value, ...progress }\n    }\n  }\n\n  const clearError = () => {\n    error.value = null\n  }\n\n  const clearCurrentJob = () => {\n    currentJob.value = null\n  }\n\n  const clearJobs = () => {\n    jobs.value = []\n    activeJobs.value = []\n  }\n\n  return {\n    // State\n    jobs,\n    activeJobs,\n    currentJob,\n    loading,\n    error,\n    \n    // Computed\n    jobsByStatus,\n    totalJobs,\n    activeJobCount,\n    recentJobs,\n    \n    // Actions\n    fetchJobs,\n    fetchActiveJobs,\n    fetchJob,\n    startTraining,\n    startHyperparameterOptimization,\n    stopJob,\n    deleteJob,\n    updateJobProgress,\n    clearError,\n    clearCurrentJob,\n    clearJobs\n  }\n})\n"],"names":["useTrainingStore","defineStore","jobs","ref","activeJobs","currentJob","loading","error","jobsByStatus","computed","j","totalJobs","activeJobCount","recentJobs","a","b","timeA","models","modelApi","trainingJobs","model","trainingJob","err","activeTrainingJobs","modelId","params","request","response","newJob","jobIndex","activeIndex","jobId","progress"],"mappings":"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"}