import{O as T,r as v,e as d}from"./vendor-CqXe5Vco.js";import{c as P,w as g,d as i,l as j,p as k}from"./index-D07s5EKd.js";const R=T("datasets",()=>{const u=v(P()),s=v([]),p=v(null),f=v([]),c=v({count:0,next:null,previous:null,currentPage:1,pageSize:20,totalPages:0}),m=v({count:0,next:null,previous:null,currentPage:1,pageSize:20,totalPages:0}),r=v({search:"",isValidated:null,medicalDomains:[],sortBy:"uploaded_at",sortOrder:"desc"}),n=v({isUploading:!1,progress:0,error:null}),x=d(()=>c.value.count),_=d(()=>s.value.length>0),I=d(()=>u.value.loading),V=d(()=>u.value.error),D=d(()=>s.value.filter(e=>e.is_validated)),y=d(()=>s.value.filter(e=>!e.is_validated)),B=d(()=>{let e=s.value;if(r.value.search){const a=r.value.search.toLowerCase();e=e.filter(t=>t.name.toLowerCase().includes(a)||t.description.toLowerCase().includes(a))}return r.value.isValidated!==null&&(e=e.filter(a=>a.is_validated===r.value.isValidated)),r.value.medicalDomains.length>0&&(e=e.filter(a=>r.value.medicalDomains.some(t=>a.medical_domains.includes(t)))),e=[...e].sort((a,t)=>{const l=a[r.value.sortBy],o=t[r.value.sortBy];return typeof l=="string"&&typeof o=="string"?r.value.sortOrder==="asc"?l.localeCompare(o):o.localeCompare(l):typeof l=="number"&&typeof o=="number"?r.value.sortOrder==="asc"?l-o:o-l:0}),e}),O=d(()=>({total:s.value.length,validated:D.value.length,pending:y.value.length,totalSamples:s.value.reduce((e,a)=>e+a.total_samples,0),averageSamples:s.value.length>0?Math.round(s.value.reduce((e,a)=>e+a.total_samples,0)/s.value.length):0,totalSize:s.value.reduce((e,a)=>e+a.file_size_mb,0),uniqueDomains:[...new Set(s.value.flatMap(e=>e.medical_domains))].length})),h=async(e=1,a=20)=>await g(u.value,async()=>{const t=await i.getDatasets(e,a);return s.value=t.items||t.results||[],c.value={count:t.count||0,next:t.next,previous:t.previous,currentPage:e,pageSize:a,totalPages:Math.ceil((t.count||0)/a)},k("datasets",s.value),t}),w=async e=>await g(u.value,async()=>{const a=await i.getDataset(e);p.value=a;const t=s.value.findIndex(l=>l.id===e);return t!==-1&&(s.value[t]=a),a}),C=async(e,a)=>{n.value.isUploading=!0,n.value.progress=0,n.value.error=null;try{n.value.progress=10,a?.(10);const t={name:e.name};e.description&&(t.description=e.description);const l=await i.createDataset(t);if(e.file){n.value.progress=30,a?.(30);const o=setInterval(()=>{n.value.progress<90&&(n.value.progress+=10,a?.(n.value.progress))},200);await i.uploadDatasetFile(l.id,e.file),clearInterval(o)}return n.value.progress=100,a?.(100),s.value.unshift(l),c.value.count++,l}catch(t){throw n.value.error=t instanceof Error?t.message:"Upload failed",t}finally{n.value.isUploading=!1,setTimeout(()=>{n.value.progress=0,n.value.error=null},2e3)}},L=async(e,a)=>await g(u.value,async()=>{const t=await i.updateDataset(e,a),l=s.value.findIndex(o=>o.id===e);return l!==-1&&(s.value[l]=t),p.value?.id===e&&(p.value=t),t}),M=async e=>await g(u.value,async()=>{await i.deleteDataset(e),s.value=s.value.filter(a=>a.id!==e),c.value.count--,p.value?.id===e&&(p.value=null)}),b=async e=>await g(u.value,async()=>{const a=await i.validateDataset(e);return await w(e),a}),F=async(e,a=1,t=20)=>await g(u.value,async()=>{const l=await i.getDatasetSamples(e,a,t);return f.value=l.items||l.results||[],m.value={count:l.count||0,next:l.next,previous:l.previous,currentPage:a,pageSize:t,totalPages:Math.ceil((l.count||0)/t)},l}),U=async e=>await g(u.value,async()=>await i.getDatasetStats(e)),z=e=>{r.value.search=e},q=e=>{r.value.isValidated=e},A=e=>{r.value.medicalDomains=e},E=(e,a)=>{r.value.sortBy=e,r.value.sortOrder=a},S=()=>{r.value={search:"",isValidated:null,medicalDomains:[],sortBy:"uploaded_at",sortOrder:"desc"}};return{datasets:s,currentDataset:p,samples:f,pagination:c,samplesPagination:m,filters:r,uploadState:n,totalDatasets:x,hasDatasets:_,isLoading:I,error:V,validatedDatasets:D,pendingDatasets:y,filteredDatasets:B,statistics:O,fetchDatasets:h,fetchDataset:w,createDataset:C,updateDataset:L,deleteDataset:M,validateDataset:b,fetchDatasetSamples:F,getDatasetStats:U,setSearch:z,setValidationFilter:q,setMedicalDomainsFilter:A,setSorting:E,clearFilters:S,getDatasetById:e=>s.value.find(a=>a.id===e),refreshDatasets:async()=>{await h(c.value.currentPage,c.value.pageSize)},resetState:()=>{s.value=[],p.value=null,f.value=[],c.value={count:0,next:null,previous:null,currentPage:1,pageSize:20,totalPages:0},m.value={count:0,next:null,previous:null,currentPage:1,pageSize:20,totalPages:0},S(),u.value=P()},loadPersistedData:()=>{const e=j("datasets",[]);e.length>0&&(s.value=e)}}});export{R as u};
//# sourceMappingURL=datasets-Bt4WZcQM.js.map
