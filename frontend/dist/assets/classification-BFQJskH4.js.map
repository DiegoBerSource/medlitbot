{"version":3,"file":"classification-BFQJskH4.js","sources":["../../src/stores/classification.ts"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\nimport { classificationApi } from '@/utils/api'\nimport type { \n  ClassificationResult, \n  ClassificationRequest,\n  ClassificationResponse,\n  BatchClassificationRequest,\n  BatchClassificationResponse\n} from '@/types'\n\nexport const useClassificationStore = defineStore('classification', () => {\n  // State\n  const predictions = ref<ClassificationResult[]>([])\n  const currentPrediction = ref<ClassificationResult | null>(null)\n  const loading = ref(false)\n  const batchLoading = ref(false)\n  const error = ref<string | null>(null)\n\n  // Computed\n  const totalPredictions = computed(() => predictions.value.length)\n  \n  const predictionsByDomain = computed(() => {\n    const domains: Record<string, ClassificationResult[]> = {}\n    predictions.value.forEach(pred => {\n      pred.predicted_domains?.forEach(domain => {\n        if (!domains[domain]) {\n          domains[domain] = []\n        }\n        domains[domain]!.push(pred)\n      })\n    })\n    return domains\n  })\n\n  const recentPredictions = computed(() => \n    predictions.value\n      .slice()\n      .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\n      .slice(0, 10)\n  )\n\n  const predictionStats = computed(() => ({\n    total: totalPredictions.value,\n    domains: Object.keys(predictionsByDomain.value).length,\n    recentCount: recentPredictions.value.length\n  }))\n\n  // Actions\n  const fetchPredictions = async (page = 1, pageSize = 20) => {\n    loading.value = true\n    error.value = null\n    try {\n      const response = await classificationApi.getPredictions(page, pageSize)\n      if (page === 1) {\n        predictions.value = response.items || response.results || []\n      } else {\n        predictions.value.push(...(response.items || response.results || []))\n      }\n      return response\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Failed to fetch predictions'\n      console.error('Failed to fetch predictions:', err)\n      throw err\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const fetchPrediction = async (id: number) => {\n    loading.value = true\n    error.value = null\n    try {\n      // Note: This endpoint might not exist in the current API, but we'll implement it for completeness\n      const prediction = predictions.value.find(p => p.id === id)\n      if (prediction) {\n        currentPrediction.value = prediction\n        return prediction\n      }\n      // If not found locally, you might want to implement a specific API call\n      throw new Error('Prediction not found')\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Failed to fetch prediction'\n      console.error('Failed to fetch prediction:', err)\n      throw err\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const classify = async (modelId: number, data: ClassificationRequest): Promise<ClassificationResponse> => {\n    loading.value = true\n    error.value = null\n    try {\n      // Add model_id to the request data\n      const requestData = {\n        ...data,\n        model_id: modelId\n      }\n      \n      const result = await classificationApi.predict(modelId, requestData)\n      \n      // Create a classification result record\n      const predictionRecord: ClassificationResult = {\n        id: Date.now(), // Temporary ID\n        model: modelId,\n        title: data.title,\n        abstract: data.abstract,\n        predicted_domains: result.predicted_domains,\n        confidence_scores: result.confidence_scores,\n        all_domain_scores: result.all_domain_scores || result.confidence_scores,\n        prediction_threshold: data.threshold || 0.5,\n        inference_time_ms: result.inference_time_ms || 0,\n        created_at: new Date().toISOString()\n      }\n      \n      predictions.value.unshift(predictionRecord)\n      currentPrediction.value = predictionRecord\n      \n      return result\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : 'Failed to classify article'\n      console.error('Failed to classify article:', err)\n      throw err\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const batchClassify = async (modelId: number, data: BatchClassificationRequest): Promise<BatchClassificationResponse> => {\n    batchLoading.value = true\n    error.value = null\n    try {\n      const results = await classificationApi.batchPredict(modelId, data)\n      \n      // Create classification result records for each article\n      const predictionRecords: ClassificationResult[] = results.results.map((pred, index) => ({\n        id: Date.now() + index, // Temporary ID\n        model: modelId,\n        title: data.articles?.[index]?.title || '',\n        abstract: data.articles?.[index]?.abstract || '',\n        predicted_domains: pred.predicted_domains,\n        confidence_scores: pred.confidence_scores,\n        all_domain_scores: pred.confidence_scores, // Use confidence_scores as fallback\n        prediction_threshold: data.threshold || 0.5,\n        inference_time_ms: pred.inference_time_ms || 0,\n        created_at: new Date().toISOString()\n      }))\n      \n      predictions.value.unshift(...predictionRecords)\n      \n      return results\n    } catch (err: any) {\n      const errorMessage = extractErrorMessage(err)\n      error.value = errorMessage\n      console.error('Failed to perform batch classification:', err)\n      throw new Error(errorMessage)\n    } finally {\n      batchLoading.value = false\n    }\n  }\n\n  const clearPredictions = () => {\n    predictions.value = []\n  }\n\n  const clearError = () => {\n    error.value = null\n  }\n\n  const clearCurrentPrediction = () => {\n    currentPrediction.value = null\n  }\n\n  // Helper function to extract meaningful error messages from API responses\n  const extractErrorMessage = (err: any): string => {\n    const defaultMessage = 'Failed to perform batch classification'\n    \n    const details = err.response?.data?.detail\n    if (!details) {\n      return err.response?.data?.error || err.message || defaultMessage\n    }\n    \n    if (typeof details === 'string') {\n      return details\n    }\n    \n    if (Array.isArray(details) && details.length > 0) {\n      const firstError = details[0]\n      if (firstError.type === 'too_long' && firstError.loc?.includes('articles')) {\n        const maxLength = firstError.ctx?.max_length || 1000\n        const actualLength = firstError.ctx?.actual_length || 'unknown'\n        return `Too many articles: Maximum ${maxLength} articles allowed, but you provided ${actualLength}`\n      }\n      return firstError.msg || defaultMessage\n    }\n    \n    return defaultMessage\n  }\n\n  return {\n    // State\n    predictions,\n    currentPrediction,\n    loading,\n    batchLoading,\n    error,\n    \n    // Computed\n    totalPredictions,\n    predictionsByDomain,\n    recentPredictions,\n    predictionStats,\n    \n    // Actions\n    fetchPredictions,\n    fetchPrediction,\n    classify,\n    batchClassify,\n    clearPredictions,\n    clearError,\n    clearCurrentPrediction\n  }\n})\n"],"names":["useClassificationStore","defineStore","predictions","ref","currentPrediction","loading","batchLoading","error","totalPredictions","computed","predictionsByDomain","domains","pred","domain","recentPredictions","a","b","predictionStats","fetchPredictions","page","pageSize","response","classificationApi","err","fetchPrediction","id","prediction","p","classify","modelId","data","requestData","result","predictionRecord","batchClassify","results","predictionRecords","index","errorMessage","extractErrorMessage","clearPredictions","clearError","clearCurrentPrediction","defaultMessage","details","firstError","maxLength","actualLength"],"mappings":"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"}