{"version":3,"file":"ModelTraining-jxlAga-P.js","sources":["../../src/stores/websocket.ts","../../src/views/models/ModelTraining.vue"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref } from 'vue'\nimport { useTrainingStore } from './training'\n\ninterface WebSocketMessage {\n  type: string\n  data: any\n}\n\nexport const useWebSocketStore = defineStore('websocket', () => {\n  // State\n  const connected = ref(false)\n  const socket = ref<WebSocket | null>(null)\n  const reconnectAttempts = ref(0)\n  const maxReconnectAttempts = 5\n\n  // Get training store for updates\n  const trainingStore = useTrainingStore()\n\n  // Actions\n  const connect = (modelId?: number) => {\n    if (socket.value?.readyState === WebSocket.OPEN) return\n\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:'\n    const wsUrl = modelId \n      ? `${protocol}//${window.location.host}/ws/training/${modelId}/`\n      : `${protocol}//${window.location.host}/ws/training/`\n\n    socket.value = new WebSocket(wsUrl)\n\n    socket.value.onopen = () => {\n      connected.value = true\n      reconnectAttempts.value = 0\n      console.log('WebSocket connected')\n    }\n\n    socket.value.onmessage = (event) => {\n      const message: WebSocketMessage = JSON.parse(event.data)\n      handleMessage(message)\n    }\n\n    socket.value.onclose = () => {\n      connected.value = false\n      console.log('WebSocket disconnected')\n      \n      // Auto-reconnect for training updates\n      if (reconnectAttempts.value < maxReconnectAttempts) {\n        setTimeout(() => {\n          reconnectAttempts.value++\n          connect(modelId)\n        }, 1000 * Math.pow(2, reconnectAttempts.value))\n      }\n    }\n\n    socket.value.onerror = (error) => {\n      console.error('WebSocket error:', error)\n    }\n  }\n\n  const disconnect = () => {\n    if (socket.value) {\n      socket.value.close()\n      socket.value = null\n      connected.value = false\n      reconnectAttempts.value = 0\n    }\n  }\n\n  const handleMessage = (message: WebSocketMessage) => {\n    if (message.type === 'training_progress') {\n      // Update training store with real-time data\n      const data = message.data\n      trainingStore.updateJobProgress(data.model_id, {\n        progress_percentage: data.progress_percentage,\n        current_epoch: data.current_epoch,\n        total_epochs: data.total_epochs,\n        current_loss: data.current_loss,\n        current_accuracy: data.current_accuracy,\n        status: data.status,\n        updated_at: data.timestamp\n      })\n    }\n  }\n\n  return {\n    connected,\n    connect,\n    disconnect,\n    reconnectAttempts\n  }\n})\n","<template>\n  <div class=\"p-6 max-w-7xl mx-auto\">\n    <!-- Header -->\n    <div class=\"mb-8\">\n      <div class=\"flex items-center justify-between mb-4\">\n        <div>\n          <h1 class=\"text-3xl font-bold text-gray-900\">Model Training</h1>\n          <p v-if=\"model\" class=\"text-gray-600 mt-1\">{{ model.name }}</p>\n        </div>\n        <div class=\"flex space-x-3\">\n          <button \n            v-if=\"!currentJob || currentJob.status !== 'running'\"\n            @click=\"startTraining\"\n            :disabled=\"loading || !model || model.status === 'training'\"\n            class=\"btn-primary\"\n          >\n            <Icon name=\"play\" class=\"w-4 h-4 mr-2\" />\n            Start Training\n          </button>\n          <button \n            v-if=\"currentJob && currentJob.status === 'running'\"\n            @click=\"stopTraining\"\n            :disabled=\"loading\"\n            class=\"btn-secondary\"\n          >\n            <Icon name=\"stop\" class=\"w-4 h-4 mr-2\" />\n            Stop Training\n          </button>\n          <button \n            @click=\"refreshData\"\n            :disabled=\"loading\"\n            class=\"btn-outline\"\n          >\n            <Icon name=\"refresh\" class=\"w-4 h-4 mr-2\" />\n            Refresh\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Loading State -->\n    <div v-if=\"initialLoading\" class=\"flex items-center justify-center py-12\">\n      <div class=\"text-center\">\n        <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n        <p class=\"mt-2 text-gray-600\">Loading training data...</p>\n      </div>\n    </div>\n\n    <!-- Error State -->\n    <div v-else-if=\"error\" class=\"bg-red-50 border border-red-200 rounded-lg p-6 mb-6\">\n      <div class=\"flex items-center\">\n        <Icon name=\"alert\" class=\"w-5 h-5 text-red-500 mr-2\" />\n        <h3 class=\"text-sm font-medium text-red-800\">Error</h3>\n      </div>\n      <p class=\"mt-1 text-sm text-red-700\">{{ error }}</p>\n      <button @click=\"refreshData\" class=\"mt-3 btn-outline text-red-700 border-red-300 hover:bg-red-50\">\n        Try Again\n      </button>\n    </div>\n\n    <!-- Main Content -->\n    <div v-else class=\"space-y-6\">\n      <!-- Current Training Status -->\n      <div class=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <!-- Training Progress Card -->\n        <div class=\"lg:col-span-2\">\n          <div v-if=\"currentJob\" class=\"medical-card\">\n            <div class=\"flex items-center justify-between mb-6\">\n              <h3 class=\"text-xl font-semibold text-gray-900\">Training Progress</h3>\n              <span \n                class=\"status-badge text-sm\"\n                :class=\"{\n                  'status-badge-success': currentJob.status === 'completed',\n                  'status-badge-warning': currentJob.status === 'running',\n                  'status-badge-error': currentJob.status === 'failed',\n                  'status-badge-info': currentJob.status === 'pending'\n                }\"\n              >\n                {{ formatStatus(currentJob.status) }}\n              </span>\n            </div>\n\n            <!-- Progress Bar -->\n            <div class=\"mb-6\">\n              <div class=\"flex justify-between text-sm text-gray-600 mb-2\">\n                <span>Overall Progress</span>\n                <span>{{ Math.round(currentJob.progress_percentage) }}%</span>\n              </div>\n              <div class=\"progress-bar\">\n                <div \n                  class=\"progress-bar-fill transition-all duration-300\"\n                  :style=\"{ width: currentJob.progress_percentage + '%' }\"\n                  :class=\"{\n                    'bg-green-500': currentJob.status === 'completed',\n                    'bg-blue-500': currentJob.status === 'running',\n                    'bg-red-500': currentJob.status === 'failed'\n                  }\"\n                />\n              </div>\n            </div>\n\n            <!-- Training Metrics -->\n            <div class=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n              <div class=\"text-center\">\n                <div class=\"text-2xl font-bold text-gray-900\">{{ currentJob.current_epoch }}</div>\n                <div class=\"text-sm text-gray-500\">Current Epoch</div>\n              </div>\n              <div class=\"text-center\">\n                <div class=\"text-2xl font-bold text-gray-900\">{{ currentJob.total_epochs }}</div>\n                <div class=\"text-sm text-gray-500\">Total Epochs</div>\n              </div>\n              <div class=\"text-center\">\n                <div class=\"text-2xl font-bold text-gray-900\">\n                  {{ currentJob.current_loss ? currentJob.current_loss.toFixed(4) : '--' }}\n                </div>\n                <div class=\"text-sm text-gray-500\">Current Loss</div>\n              </div>\n              <div class=\"text-center\">\n                <div class=\"text-2xl font-bold text-gray-900\">\n                  {{ currentJob.current_accuracy ? (currentJob.current_accuracy * 100).toFixed(1) + '%' : '--' }}\n                </div>\n                <div class=\"text-sm text-gray-500\">Current Accuracy</div>\n              </div>\n            </div>\n\n            <!-- Time Information -->\n            <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n              <div>\n                <span class=\"text-gray-500\">Started:</span>\n                <span class=\"ml-1 font-medium\">{{ formatDate(currentJob.started_at) }}</span>\n              </div>\n              <div v-if=\"currentJob.completed_at\">\n                <span class=\"text-gray-500\">Completed:</span>\n                <span class=\"ml-1 font-medium\">{{ formatDate(currentJob.completed_at) }}</span>\n              </div>\n              <div v-else-if=\"currentJob.status === 'running'\">\n                <span class=\"text-gray-500\">Estimated:</span>\n                <span class=\"ml-1 font-medium\">{{ getEstimatedCompletion() }}</span>\n              </div>\n              <div v-if=\"currentJob.started_at && currentJob.status === 'running'\">\n                <span class=\"text-gray-500\">Duration:</span>\n                <span class=\"ml-1 font-medium\">{{ getTrainingDuration() }}</span>\n              </div>\n            </div>\n\n            <!-- Error Message -->\n            <div v-if=\"currentJob.error_message\" class=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-md\">\n              <div class=\"flex items-start\">\n                <Icon name=\"alert\" class=\"w-4 h-4 text-red-500 mt-0.5 mr-2 flex-shrink-0\" />\n                <div>\n                  <h4 class=\"text-sm font-medium text-red-800\">Training Error</h4>\n                  <p class=\"mt-1 text-sm text-red-700\">{{ currentJob.error_message }}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- No Training Job State -->\n          <div v-else class=\"medical-card text-center py-12\">\n            <Icon name=\"brain\" class=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 class=\"text-lg font-medium text-gray-900 mb-2\">No Active Training</h3>\n            <p class=\"text-gray-600 mb-6\">This model is not currently being trained. Start training to monitor progress here.</p>\n            <button \n              @click=\"startTraining\"\n              :disabled=\"loading || !model\"\n              class=\"btn-primary\"\n            >\n              <Icon name=\"play\" class=\"w-4 h-4 mr-2\" />\n              Start Training\n            </button>\n          </div>\n        </div>\n\n        <!-- Model Information -->\n        <div class=\"space-y-6\">\n          <!-- Model Details -->\n          <div v-if=\"model\" class=\"medical-card\">\n            <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">Model Details</h3>\n            <div class=\"space-y-3 text-sm\">\n              <div class=\"flex justify-between\">\n                <span class=\"text-gray-500\">Type:</span>\n                <span class=\"font-medium\">{{ formatModelType(model.model_type) }}</span>\n              </div>\n              <div class=\"flex justify-between\">\n                <span class=\"text-gray-500\">Status:</span>\n                <span class=\"font-medium\" :class=\"getStatusColor(model.status)\">{{ formatStatus(model.status) }}</span>\n              </div>\n              <div class=\"flex justify-between\">\n                <span class=\"text-gray-500\">Dataset:</span>\n                <span class=\"font-medium\">{{ model.dataset_name || 'Unknown' }}</span>\n              </div>\n              <div class=\"flex justify-between\">\n                <span class=\"text-gray-500\">Created:</span>\n                <span class=\"font-medium\">{{ formatDate(model.created_at) }}</span>\n              </div>\n              <div v-if=\"model.accuracy\" class=\"flex justify-between\">\n                <span class=\"text-gray-500\">Best Accuracy:</span>\n                <span class=\"font-medium text-green-600\">{{ (model.accuracy * 100).toFixed(1) }}%</span>\n              </div>\n            </div>\n          </div>\n\n          <!-- Quick Stats -->\n          <div class=\"medical-card\">\n            <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">Training History</h3>\n            <div class=\"space-y-3\">\n              <div class=\"flex justify-between text-sm\">\n                <span class=\"text-gray-500\">Total Runs:</span>\n                <span class=\"font-medium\">{{ trainingHistory.length }}</span>\n              </div>\n              <div class=\"flex justify-between text-sm\">\n                <span class=\"text-gray-500\">Successful:</span>\n                <span class=\"font-medium text-green-600\">{{ trainingHistory.filter(j => j.status === 'completed').length }}</span>\n              </div>\n              <div class=\"flex justify-between text-sm\">\n                <span class=\"text-gray-500\">Failed:</span>\n                <span class=\"font-medium text-red-600\">{{ trainingHistory.filter(j => j.status === 'failed').length }}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Training History -->\n      <div v-if=\"trainingHistory.length > 0\" class=\"medical-card\">\n        <div class=\"flex items-center justify-between mb-6\">\n          <h3 class=\"text-xl font-semibold text-gray-900\">Training History</h3>\n          <button @click=\"loadTrainingHistory\" :disabled=\"loading\" class=\"btn-outline text-sm\">\n            <Icon name=\"refresh\" class=\"w-4 h-4 mr-1\" />\n            Refresh\n          </button>\n        </div>\n        \n        <div class=\"overflow-x-auto\">\n          <table class=\"min-w-full divide-y divide-gray-200\">\n            <thead class=\"bg-gray-50\">\n              <tr>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Progress</th>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Epochs</th>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Best Accuracy</th>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Duration</th>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Started</th>\n              </tr>\n            </thead>\n            <tbody class=\"bg-white divide-y divide-gray-200\">\n              <tr v-for=\"job in trainingHistory.slice(0, 10)\" :key=\"job.id\" class=\"hover:bg-gray-50\">\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                  <span \n                    class=\"status-badge text-xs\"\n                    :class=\"{\n                      'status-badge-success': job.status === 'completed',\n                      'status-badge-warning': job.status === 'running',\n                      'status-badge-error': job.status === 'failed',\n                      'status-badge-info': job.status === 'pending'\n                    }\"\n                  >\n                    {{ formatStatus(job.status) }}\n                  </span>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                  <div class=\"flex items-center\">\n                    <div class=\"w-16 bg-gray-200 rounded-full h-2 mr-2\">\n                      <div \n                        class=\"bg-blue-600 h-2 rounded-full\"\n                        :style=\"{ width: job.progress_percentage + '%' }\"\n                      ></div>\n                    </div>\n                    <span class=\"text-sm text-gray-900\">{{ Math.round(job.progress_percentage) }}%</span>\n                  </div>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                  {{ job.current_epoch }}/{{ job.total_epochs }}\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                  {{ job.current_accuracy ? (job.current_accuracy * 100).toFixed(1) + '%' : '--' }}\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                  {{ getJobDuration(job) }}\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                  {{ formatDate(job.started_at) }}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <!-- Empty State -->\n      <div v-else class=\"medical-card text-center py-12\">\n        <Icon name=\"chart\" class=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n        <h3 class=\"text-lg font-medium text-gray-900 mb-2\">No Training History</h3>\n        <p class=\"text-gray-600\">Training history will appear here once you start training this model.</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, onUnmounted, computed, watch } from 'vue'\n// import { useRouter } from 'vue-router'\nimport { useToast } from 'vue-toastification'\nimport Icon from '@/components/ui/Icon.vue'\nimport { useModelStore } from '@/stores/models'\nimport { useTrainingStore } from '@/stores/training'\nimport { useWebSocketStore } from '@/stores/websocket'\nimport type { MLModel, TrainingJob, StartTrainingRequest } from '@/types'\n\ninterface Props {\n  id: number\n}\n\nconst props = defineProps<Props>()\nconst toast = useToast()\nconst modelStore = useModelStore()\nconst trainingStore = useTrainingStore()\nconst websocketStore = useWebSocketStore()\n\n// Reactive state\nconst model = ref<MLModel | null>(null)\nconst currentJob = ref<TrainingJob | null>(null)\nconst trainingHistory = ref<TrainingJob[]>([])\nconst initialLoading = ref(true)\nconst loading = ref(false)\nconst error = ref<string | null>(null)\nconst refreshInterval = ref<number | null>(null)\n\n// Auto-refresh when training is active\nconst shouldAutoRefresh = computed(() => {\n  return currentJob.value?.status === 'running'\n})\n\n// Watch for training status changes to control auto-refresh\nwatch(shouldAutoRefresh, (newVal) => {\n  if (newVal) {\n    startAutoRefresh()\n  } else {\n    stopAutoRefresh()\n  }\n})\n\n// Lifecycle hooks\nonMounted(async () => {\n  await loadData()\n  \n  // Connect to WebSocket for real-time updates\n  websocketStore.connect(props.id)\n  \n  if (shouldAutoRefresh.value) {\n    startAutoRefresh()\n  }\n})\n\nonUnmounted(() => {\n  stopAutoRefresh()\n  websocketStore.disconnect()\n})\n\n// Data loading methods\nconst loadData = async () => {\n  initialLoading.value = true\n  error.value = null\n  \n  try {\n    await Promise.all([\n      loadModel(),\n      loadCurrentJob(),\n      loadTrainingHistory()\n    ])\n  } catch (err) {\n    error.value = err instanceof Error ? err.message : 'Failed to load training data'\n    console.error('Failed to load data:', err)\n  } finally {\n    initialLoading.value = false\n  }\n}\n\nconst loadModel = async () => {\n  try {\n    model.value = await modelStore.fetchModel(props.id)\n  } catch (err) {\n    console.error('Failed to load model:', err)\n    throw new Error('Failed to load model details')\n  }\n}\n\nconst loadCurrentJob = async () => {\n  try {\n    currentJob.value = await trainingStore.fetchJob(props.id)\n  } catch (err) {\n    // It's normal for models to not have active training jobs\n    currentJob.value = null\n    console.log('No active training job found:', err instanceof Error ? err.message : err)\n  }\n}\n\nconst loadTrainingHistory = async () => {\n  try {\n    await trainingStore.fetchJobs()\n    // Filter jobs for this specific model\n    trainingHistory.value = trainingStore.jobs.filter(job => job.model === props.id)\n      .sort((a, b) => new Date(b.started_at || 0).getTime() - new Date(a.started_at || 0).getTime())\n  } catch (err) {\n    console.error('Failed to load training history:', err)\n    trainingHistory.value = []\n  }\n}\n\nconst refreshData = async () => {\n  loading.value = true\n  try {\n    await Promise.all([\n      loadCurrentJob(),\n      loadTrainingHistory()\n    ])\n  } catch (err) {\n    console.error('Failed to refresh training data:', err)\n    toast.error('Failed to refresh training data')\n  } finally {\n    loading.value = false\n  }\n}\n\n// Auto-refresh functionality\nconst startAutoRefresh = () => {\n  if (refreshInterval.value) {\n    clearInterval(refreshInterval.value)\n  }\n  \n  refreshInterval.value = setInterval(async () => {\n    await refreshData()\n  }, 5000) // Refresh every 5 seconds\n}\n\nconst stopAutoRefresh = () => {\n  if (refreshInterval.value) {\n    clearInterval(refreshInterval.value)\n    refreshInterval.value = null\n  }\n}\n\n// Training control methods\nconst startTraining = async () => {\n  if (!model.value) return\n  \n  loading.value = true\n  \n  try {\n    // Create a basic training request with default parameters\n    const trainingParams: StartTrainingRequest = {\n      total_epochs: (model.value.parameters?.hyperparameters as any)?.epochs || 3,\n      batch_size: (model.value.parameters?.hyperparameters as any)?.batch_size || 16,\n      learning_rate: parseFloat((model.value.parameters?.hyperparameters as any)?.learning_rate || '2e-5'),\n      validation_split: (model.value.parameters as any)?.validation_split || 0.2\n    }\n    \n    const newJob = await trainingStore.startTraining(props.id, trainingParams)\n    currentJob.value = newJob\n    \n    toast.success('Training started successfully!')\n    \n    // Start auto-refresh\n    startAutoRefresh()\n    \n  } catch (err) {\n    console.error('Failed to start training:', err)\n    toast.error('Failed to start training. Please try again.')\n  } finally {\n    loading.value = false\n  }\n}\n\nconst stopTraining = async () => {\n  loading.value = true\n  \n  try {\n    await trainingStore.stopJob(props.id)\n    toast.success('Training stopped successfully!')\n    \n    // Refresh to get updated status\n    await refreshData()\n    \n    // Stop auto-refresh\n    stopAutoRefresh()\n    \n  } catch (err) {\n    console.error('Failed to stop training:', err)\n    toast.error('Failed to stop training. Please try again.')\n  } finally {\n    loading.value = false\n  }\n}\n\n// Formatting utilities\nconst formatStatus = (status: string): string => {\n  const statusMap: Record<string, string> = {\n    'pending': 'Pending',\n    'running': 'Running', \n    'completed': 'Completed',\n    'failed': 'Failed',\n    'created': 'Created',\n    'training': 'Training'\n  }\n  return statusMap[status] || status.charAt(0).toUpperCase() + status.slice(1)\n}\n\nconst formatModelType = (type: string): string => {\n  const typeMap: Record<string, string> = {\n    'bert': 'BERT',\n    'biobert': 'BioBERT',\n    'clinicalbert': 'ClinicalBERT',\n    'scibert': 'SciBERT',\n    'traditional': 'Traditional ML',\n    'hybrid': 'Hybrid',\n    'custom': 'Custom'\n  }\n  return typeMap[type] || type.toUpperCase()\n}\n\nconst getStatusColor = (status: string): string => {\n  const colorMap: Record<string, string> = {\n    'created': 'text-gray-600',\n    'training': 'text-blue-600',\n    'completed': 'text-green-600',\n    'failed': 'text-red-600'\n  }\n  return colorMap[status] || 'text-gray-600'\n}\n\nconst formatDate = (dateString: string | null): string => {\n  if (!dateString) return '--'\n  try {\n    return new Date(dateString).toLocaleString()\n  } catch {\n    return '--'\n  }\n}\n\nconst getTrainingDuration = (): string => {\n  if (!currentJob.value?.started_at) return '--'\n  \n  const start = new Date(currentJob.value.started_at)\n  const now = new Date()\n  const diff = now.getTime() - start.getTime()\n  \n  const hours = Math.floor(diff / (1000 * 60 * 60))\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))\n  \n  if (hours > 0) {\n    return `${hours}h ${minutes}m`\n  }\n  return `${minutes}m`\n}\n\nconst getJobDuration = (job: TrainingJob): string => {\n  if (!job.started_at) return '--'\n  \n  const start = new Date(job.started_at)\n  const end = job.completed_at ? new Date(job.completed_at) : new Date()\n  const diff = end.getTime() - start.getTime()\n  \n  const hours = Math.floor(diff / (1000 * 60 * 60))\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))\n  \n  if (hours > 0) {\n    return `${hours}h ${minutes}m`\n  }\n  return `${minutes}m`\n}\n\nconst getEstimatedCompletion = (): string => {\n  if (!currentJob.value?.started_at || !currentJob.value.progress_percentage) return '--'\n  \n  const start = new Date(currentJob.value.started_at)\n  const now = new Date()\n  const elapsed = now.getTime() - start.getTime()\n  \n  if (currentJob.value.progress_percentage > 0) {\n    const estimated = (elapsed / currentJob.value.progress_percentage) * 100\n    const remaining = estimated - elapsed\n    \n    if (remaining > 0) {\n      const remainingMinutes = Math.floor(remaining / (1000 * 60))\n      const remainingHours = Math.floor(remainingMinutes / 60)\n      \n      if (remainingHours > 0) {\n        return `~${remainingHours}h ${remainingMinutes % 60}m`\n      }\n      return `~${remainingMinutes}m`\n    }\n  }\n  \n  return '--'\n}\n</script>\n\n<style scoped>\n.medical-card {\n  @apply bg-white rounded-xl shadow-sm border border-gray-200 p-6;\n}\n\n.status-badge {\n  @apply px-2 py-1 rounded-full text-xs font-medium;\n}\n\n.status-badge-success {\n  @apply bg-green-100 text-green-800;\n}\n\n.status-badge-warning {\n  @apply bg-yellow-100 text-yellow-800;\n}\n\n.status-badge-error {\n  @apply bg-red-100 text-red-800;\n}\n\n.status-badge-info {\n  @apply bg-blue-100 text-blue-800;\n}\n\n.progress-bar {\n  @apply w-full bg-gray-200 rounded-full h-2;\n}\n\n.progress-bar-fill {\n  @apply h-2 rounded-full;\n}\n\n.btn-primary {\n  @apply bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg font-medium transition-colors inline-flex items-center;\n}\n\n.btn-secondary {\n  @apply bg-gray-600 hover:bg-gray-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg font-medium transition-colors inline-flex items-center;\n}\n\n.btn-outline {\n  @apply border border-gray-300 hover:bg-gray-50 disabled:bg-gray-100 text-gray-700 px-4 py-2 rounded-lg font-medium transition-colors inline-flex items-center;\n}\n</style>\n"],"names":["useWebSocketStore","defineStore","connected","ref","socket","reconnectAttempts","maxReconnectAttempts","trainingStore","useTrainingStore","connect","modelId","protocol","wsUrl","event","message","handleMessage","error","disconnect","data","props","__props","toast","useToast","modelStore","useModelStore","websocketStore","model","currentJob","trainingHistory","initialLoading","loading","refreshInterval","shouldAutoRefresh","computed","watch","newVal","startAutoRefresh","stopAutoRefresh","onMounted","loadData","onUnmounted","loadModel","loadCurrentJob","loadTrainingHistory","err","job","a","b","refreshData","startTraining","trainingParams","newJob","stopTraining","formatStatus","status","formatModelType","type","getStatusColor","formatDate","dateString","getTrainingDuration","start","diff","hours","minutes","getJobDuration","getEstimatedCompletion","elapsed","remaining","remainingMinutes","remainingHours","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_cache","_hoisted_4","_toDisplayString","_hoisted_5","_createVNode","Icon","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_normalizeStyle","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_46","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","_hoisted_53","_hoisted_54","_hoisted_55","_hoisted_56","_hoisted_57","_hoisted_58","_hoisted_59","_hoisted_60","j","_hoisted_61","_hoisted_62","_hoisted_63","_hoisted_64","_hoisted_66","_hoisted_67","_hoisted_68","_Fragment","_renderList","_hoisted_69","_hoisted_70","_hoisted_71","_hoisted_72","_hoisted_73","_hoisted_74","_hoisted_75","_hoisted_76","_hoisted_77","_hoisted_78"],"mappings":"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"}